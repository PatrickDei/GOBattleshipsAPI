// Code generated by MockGen. DO NOT EDIT.
// Source: game_service.go

// Package service is a generated GoMock package.
package service

import (
	domain "go-battleships/domain"
	errors "go-battleships/errors"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGameService is a mock of GameService interface.
type MockGameService struct {
	ctrl     *gomock.Controller
	recorder *MockGameServiceMockRecorder
}

// MockGameServiceMockRecorder is the mock recorder for MockGameService.
type MockGameServiceMockRecorder struct {
	mock *MockGameService
}

// NewMockGameService creates a new mock instance.
func NewMockGameService(ctrl *gomock.Controller) *MockGameService {
	mock := &MockGameService{ctrl: ctrl}
	mock.recorder = &MockGameServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameService) EXPECT() *MockGameServiceMockRecorder {
	return m.recorder
}

// CreateGame mocks base method.
func (m *MockGameService) CreateGame(playerId, opponentId, playerBoardId, opponentBoardId string) (*domain.Game, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGame", playerId, opponentId, playerBoardId, opponentBoardId)
	ret0, _ := ret[0].(*domain.Game)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// CreateGame indicates an expected call of CreateGame.
func (mr *MockGameServiceMockRecorder) CreateGame(playerId, opponentId, playerBoardId, opponentBoardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGame", reflect.TypeOf((*MockGameService)(nil).CreateGame), playerId, opponentId, playerBoardId, opponentBoardId)
}

// GetById mocks base method.
func (m *MockGameService) GetById(arg0 string) (*domain.Game, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(*domain.Game)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockGameServiceMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockGameService)(nil).GetById), arg0)
}

// ListByPlayerId mocks base method.
func (m *MockGameService) ListByPlayerId(arg0 string) ([]domain.Game, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByPlayerId", arg0)
	ret0, _ := ret[0].([]domain.Game)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// ListByPlayerId indicates an expected call of ListByPlayerId.
func (mr *MockGameServiceMockRecorder) ListByPlayerId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByPlayerId", reflect.TypeOf((*MockGameService)(nil).ListByPlayerId), arg0)
}
