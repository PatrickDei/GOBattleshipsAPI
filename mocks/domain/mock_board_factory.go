// Code generated by MockGen. DO NOT EDIT.
// Source: board_factory.go

// Package domain is a generated GoMock package.
package domain

import (
	domain "go-battleships/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBoardFactory is a mock of BoardFactory interface.
type MockBoardFactory struct {
	ctrl     *gomock.Controller
	recorder *MockBoardFactoryMockRecorder
}

// MockBoardFactoryMockRecorder is the mock recorder for MockBoardFactory.
type MockBoardFactoryMockRecorder struct {
	mock *MockBoardFactory
}

// NewMockBoardFactory creates a new mock instance.
func NewMockBoardFactory(ctrl *gomock.Controller) *MockBoardFactory {
	mock := &MockBoardFactory{ctrl: ctrl}
	mock.recorder = &MockBoardFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBoardFactory) EXPECT() *MockBoardFactoryMockRecorder {
	return m.recorder
}

// GenerateNewBoard mocks base method.
func (m *MockBoardFactory) GenerateNewBoard() domain.Board {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateNewBoard")
	ret0, _ := ret[0].(domain.Board)
	return ret0
}

// GenerateNewBoard indicates an expected call of GenerateNewBoard.
func (mr *MockBoardFactoryMockRecorder) GenerateNewBoard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateNewBoard", reflect.TypeOf((*MockBoardFactory)(nil).GenerateNewBoard))
}

// PlaceBattleship mocks base method.
func (m *MockBoardFactory) PlaceBattleship(arg0 *domain.Board) domain.Ship {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceBattleship", arg0)
	ret0, _ := ret[0].(domain.Ship)
	return ret0
}

// PlaceBattleship indicates an expected call of PlaceBattleship.
func (mr *MockBoardFactoryMockRecorder) PlaceBattleship(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceBattleship", reflect.TypeOf((*MockBoardFactory)(nil).PlaceBattleship), arg0)
}

// PlaceDestroyer mocks base method.
func (m *MockBoardFactory) PlaceDestroyer(arg0 *domain.Board) domain.Ship {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceDestroyer", arg0)
	ret0, _ := ret[0].(domain.Ship)
	return ret0
}

// PlaceDestroyer indicates an expected call of PlaceDestroyer.
func (mr *MockBoardFactoryMockRecorder) PlaceDestroyer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceDestroyer", reflect.TypeOf((*MockBoardFactory)(nil).PlaceDestroyer), arg0)
}

// PlacePatrolCraft mocks base method.
func (m *MockBoardFactory) PlacePatrolCraft(arg0 *domain.Board) domain.Ship {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlacePatrolCraft", arg0)
	ret0, _ := ret[0].(domain.Ship)
	return ret0
}

// PlacePatrolCraft indicates an expected call of PlacePatrolCraft.
func (mr *MockBoardFactoryMockRecorder) PlacePatrolCraft(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlacePatrolCraft", reflect.TypeOf((*MockBoardFactory)(nil).PlacePatrolCraft), arg0)
}

// PlaceSubmarine mocks base method.
func (m *MockBoardFactory) PlaceSubmarine(arg0 *domain.Board) domain.Ship {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceSubmarine", arg0)
	ret0, _ := ret[0].(domain.Ship)
	return ret0
}

// PlaceSubmarine indicates an expected call of PlaceSubmarine.
func (mr *MockBoardFactoryMockRecorder) PlaceSubmarine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceSubmarine", reflect.TypeOf((*MockBoardFactory)(nil).PlaceSubmarine), arg0)
}
