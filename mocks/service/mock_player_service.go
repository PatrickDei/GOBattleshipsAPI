// Code generated by MockGen. DO NOT EDIT.
// Source: player_service.go

// Package service is a generated GoMock package.
package service

import (
	dto "go-battleships/dto"
	errors "go-battleships/errors"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPlayerService is a mock of PlayerService interface.
type MockPlayerService struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerServiceMockRecorder
}

// MockPlayerServiceMockRecorder is the mock recorder for MockPlayerService.
type MockPlayerServiceMockRecorder struct {
	mock *MockPlayerService
}

// NewMockPlayerService creates a new mock instance.
func NewMockPlayerService(ctrl *gomock.Controller) *MockPlayerService {
	mock := &MockPlayerService{ctrl: ctrl}
	mock.recorder = &MockPlayerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerService) EXPECT() *MockPlayerServiceMockRecorder {
	return m.recorder
}

// CreatePlayer mocks base method.
func (m *MockPlayerService) CreatePlayer(command dto.PlayerCommand) (*dto.PlayerDTO, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlayer", command)
	ret0, _ := ret[0].(*dto.PlayerDTO)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// CreatePlayer indicates an expected call of CreatePlayer.
func (mr *MockPlayerServiceMockRecorder) CreatePlayer(command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlayer", reflect.TypeOf((*MockPlayerService)(nil).CreatePlayer), command)
}

// ExistsByEmail mocks base method.
func (m *MockPlayerService) ExistsByEmail(arg0 string) (bool, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByEmail", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// ExistsByEmail indicates an expected call of ExistsByEmail.
func (mr *MockPlayerServiceMockRecorder) ExistsByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByEmail", reflect.TypeOf((*MockPlayerService)(nil).ExistsByEmail), arg0)
}

// GetById mocks base method.
func (m *MockPlayerService) GetById(arg0 string) (*dto.PlayerDTO, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(*dto.PlayerDTO)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockPlayerServiceMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockPlayerService)(nil).GetById), arg0)
}
