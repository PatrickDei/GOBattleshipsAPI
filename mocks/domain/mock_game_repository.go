// Code generated by MockGen. DO NOT EDIT.
// Source: game.go

// Package domain is a generated GoMock package.
package domain

import (
	domain "go-battleships/domain"
	errors "go-battleships/errors"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGameRepository is a mock of GameRepository interface.
type MockGameRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGameRepositoryMockRecorder
}

// MockGameRepositoryMockRecorder is the mock recorder for MockGameRepository.
type MockGameRepositoryMockRecorder struct {
	mock *MockGameRepository
}

// NewMockGameRepository creates a new mock instance.
func NewMockGameRepository(ctrl *gomock.Controller) *MockGameRepository {
	mock := &MockGameRepository{ctrl: ctrl}
	mock.recorder = &MockGameRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameRepository) EXPECT() *MockGameRepositoryMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockGameRepository) GetById(arg0 string) (*domain.Game, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(*domain.Game)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockGameRepositoryMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockGameRepository)(nil).GetById), arg0)
}

// Save mocks base method.
func (m *MockGameRepository) Save(arg0 domain.Game) (*domain.Game, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(*domain.Game)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockGameRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockGameRepository)(nil).Save), arg0)
}
